Implement a program to compute the next best move for any given Reversi (aka Othello) position based on (alpha-beta pruning) minimax search using iterative deepening search.
Simply use the difference in stones (black-white) as your heuristic function, plus use +100 for a win of black, and -100 for a win of white.

Your program should read from standard in the specification of a current board plus information on who is next to move, as well as the maximum allowed time in seconds. It should output to standard out the computed move in the format described below (standard in and out are System.in and System.out in Java).

Expect to read-in a game position plus an indicator for which side is to move and how many seconds you are allowed. ".", "B", "O" are used for "free", "black" player, and "white" player respectively. For instance, the starting position, where "black" is expected to move, and is allowed 60 seconds, would be represented as:

- abcdefgh
1 ........
2 ........
3 ........
4 ...OB...
5 ...BO...
6 ........
7 ........
8 ........
B 60

You should output one line with the coordinates of your move, the number of nodes expanded, the max search depth reached, and the minimax estimate, e.g.

move c 4 nodes 123345 depth 12 minimax 27

One clarification: if a player cannot move, they pass. In that case, return the following:
move a -1 nodes 0 depth 0 minimax 0